# [build-system]
# requires = ["mina-build>=0.2.5"]
# build-backend = "pdm.backend"

#[build-system]
#requires = ["pdm-backend", "pdm-polylith-workspace"]
#build-backend = "pdm.backend"
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
authors = [{ name = "fluentqa-team", email = "fluent-qa@fluentqa.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
description = "A Python boilet template for different types of projects."
dynamic = ["version"]
keywords = [
    "copier-template",
    "full-development-lifecycle",
    "project-template",
    "scaffold",
]
license = { text = "MIT" }
name = "qpytpl"
readme = "README.md"
requires-python = ">=3.9"


[project.scripts]
qpyapp = "qpyapp:main"
cleanup = "qpyci.commands:clean"
cov = "ci:coverage"
badge = "qpyci.commands:generate_badge"
check_format = "ci:check_format"
ci = "ci:ci"

[project.urls]
issue = "https://github.com/fluent-qa/fluentqa-pytpl/issues"
repository = "https://github.com/fluent-qa/fluentqa-pytpl"


[tool.hatch.build.targets.wheel.force-include]
"ci.py" = "ci.py"

[tool.uv]
default-groups = ["dev"]

[tool.uv.sources]
qpyci = { git = "https://github.com/fluent-qa/qpyci.git", rev = "main" }

[tool.hatch.build.targets.wheel]
packages = ["src/qpyapp"]


[dependency-groups]
lint = ["ruff>=0.8.3"]
dev = [
    "allure-pytest>=2.13.5",
    "pytest-cov>=6.0.0",
    "pytest>=8.3.4",
    "coverage-badge>=1.1.2",
]

[tool.ruff]
line-length = 120
target-version = "py39"
include = ["**/**/*.py", "tests/**/*.py", "docs/**/*.py"]

[tool.ruff.lint]
extend-select = ["Q", "RUF100", "C90", "UP", "I", "D"]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
isort = { combine-as-imports = true, known-first-party = ["qpyconf"] }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# don't format python in docstrings, pytest-examples takes care of it
docstring-code-format = false
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]
"docs/**/*.py" = ["D"]
"src/**/**/*.py" = ["D101", "D103"]


[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--alluredir",
    "allure-results",
    "--clean-alluredir",
    "-l",
    "-s",
    "--durations",
    "0"
]
log_cli = true
log_cli_level = "info"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_format = "%(asctime)s %(levelname)s %(message)s"
minversion = "6.0"
